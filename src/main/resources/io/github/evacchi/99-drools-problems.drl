package io.evacchi.github;

import io.github.evacchi.*;

dialect  "mvel"

//my_last(X,[X]).
//my_last(X,[H|T]) :- my_last(X,T).
query last(Object x, List l)
   ( ?cons(l, x, List.Nil;) )
   or
  ( ?cons(l, head, tail;) and
    ?last(x, tail;) )
end


//last_but_one(X,[X,_]).
//last_but_one(X,[_,Y|Ys]) :- last_but_one(X,[Y|Ys]).
query last_but_one(Object x, List l)
   (
     ?cons(l, x, t; ) and
     ?cons(t, th, tt; ) and
     ?nil(tt;)
   ) or (
    ?cons(l, h_, t1; ) and
    ?cons(t1, th_, tt_; ) and
    ?last_but_one(x, t1;)
   )
end

//element_at(X,[X|_],1).
//element_at(X,[_|L],K) :- K > 1, K1 is K - 1, element_at(X,L,K1).
query element_at(Object x, List l, int pos)
   ( ?cons(l, x, _t; ) and
     ?is( pos , 1; ) )
   or
  ( ?cons(l, h_, tail; ) and
    eval ( pos > 1 )     and
    ?is(pos1, pos - 1 ; )   and
    ?element_at(x, tail, pos1;) )
end


// my_length([],0).
// my_length([_|L],N) :- my_length(L,N1), N is N1 + 1.
query length(List l, int len)
   ( ?nil(l;) and
     ?is(len, 0;) )
   or
  ( ?cons(l, head, tail;) and
    ?length(tail, len1;) and
    ?sum(len, len1, 1;) )
end


// list aliases
query nil(List l)
    l := List.Nil() from List.Nil
end

query tail(List l)
    List() from l or
    ?nil(l;)
end

query atom(Object any)
    Object() from any or
    any := Object() from new Object()
end

query cons(List l, Object h, List t)
        List(h:=head, t:=tail) from l
        or (
            ?atom(h;) and
            ?tail(t;) and
            l := List() from new List(h, t)
        )
end

// number aliases
query is(Integer assignee, Integer value)
    assignee := Integer() from value
end

query sum(Integer res, Integer left, Integer right)
    res := Integer() from ((Integer)(left + right))
end